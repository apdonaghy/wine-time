{"remainingRequest":"/Users/drew/Desktop/projects/wineTime/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/drew/Desktop/projects/wineTime/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/drew/Desktop/projects/wineTime/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/drew/Desktop/projects/wineTime/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/Users/drew/Desktop/projects/wineTime/src/views/Home.vue","mtime":1617901413275},{"path":"/Users/drew/Desktop/projects/wineTime/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drew/Desktop/projects/wineTime/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/drew/Desktop/projects/wineTime/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/drew/Desktop/projects/wineTime/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}